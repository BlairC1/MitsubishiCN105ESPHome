substitutions:
  name: "esp32-hp"
  friendly_name: Clim Sejour

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf     
    #type: arduino


mqtt:  
  broker: homeassistant.local
  username: heatpumpSejour
  password: !secret mqtt_password
  discovery: true



debug:
  update_interval: 5s



# Enable logging
logger:    
  level: DEBUG
  logs:
    EVT_SETS : INFO
    WIFI : INFO
    MQTT : INFO
    WRITE_SETTINGS : INFO
    SETTINGS : INFO
    STATUS : INFO
    CN105Climate: WARN
    CN105: INFO
    climate: WARN
    sensor: WARN
    chkSum : INFO
    WRITE : WARN
    READ : WARN
    Header: INFO
    Decoder : INFO
    CONTROL_WANTED_SETTINGS: INFO
    

# Enable Home Assistant API
api:
  services:    
    - service: reboot
      then:
        - logger.log: "Redémarrage en cours..."
        - lambda: |-
            esp_restart();

    - service: set_remote_temperature
      variables:
        temperature: float
      then:
        - lambda: 'id(esp32_clim).set_remote_temperature(temperature);'

    - service: use_internal_temperature
      then:
        - lambda: 'id(esp32_clim).set_remote_temperature(0);'
  encryption:
    key: !secret encryption_key

ota:  
  password: !secret ota_pwd

wifi:
  #ssid: !secret wifi_ssid
  #password: !secret wifi_password
  
  networks:
  - ssid : !secret wifi_ssid3
    password: !secret wifi_password3
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  #- ssid: !secret wifi_ssid2
  #  password: !secret wifi_password2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heatpump-Sejour Fallback Hotspot"
    password: !secret ota_pwd

captive_portal:

# pas assez de place pour update ota 
#web_server:
#  port: 80
  
time:
  - platform: homeassistant
    id: homeassistant_time

# this setting is for local component (code is not on github)
external_components:
 - source:
     type: local
     path: components 


#this setting is for github component 
# external_components:
#  - source: github://echavet/MitsubishiCN105ESPHome
#    refresh: 0s


        # Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ${name} ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${name} IP
    ssid:
      name: ${name} SSID
    bssid:
      name: ${name} BSSID

  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"


# Sensors with general information.
sensor:
  - platform: debug
    free:
      name: "Heap Free"
    # fragmentation:
    #   name: "Heap Fragmentation"
    # block:
    #   name: "Heap Max Block"
    # loop_time:
    #   name: "Loop Time"
    # psram:
    #   name: "Free PSRAM"


  # Uptime sensor.
  - platform: uptime
    name: ${name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${name} WiFi Signal
    update_interval: 60s

  - platform: homeassistant
    id: ha_cdeg_sejour_et_cuisine
    entity_id: sensor.cdeg_sejour_et_cuisine
    internal: true
    on_value:
      then:
        - lambda: |-
            id(esp32_clim).set_remote_temperature(x);

          

uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: GPIO17
  rx_pin: GPIO16

climate:
  - platform: cn105  
    name: ${friendly_name}
    id: "esp32_clim"
    compressor_frequency_sensor:
      name: Compressor frequency (clim Sejour)    
    vertical_vane_select:
      name: Orientation de la Vane Verticale
    horizontal_vane_select:
      name: Orientation de la Vane Horizontale
    
    update_interval: 10s         # shouldn't be less than 1 second
    


# Configuration pour l'objet 'switch' (bouton)
# switch:
#   - platform: template
#     name: ${name} UART Setup Switch
#     id: uart_setup_switch
#     entity_category: DIAGNOSTIC
#     #setup_priority : -100.0 ## late
#     optimistic: true
#     turn_on_action:
#       - lambda: |-
#           // Appelle la méthode 'setupUART' quand le switch est activé
#           id(esp32_clim).setupUART();
#     turn_off_action:
#       - lambda: |-
#           // Appelle la méthode 'setupUART' quand le switch est activé
#           id(esp32_clim).disconnectUART();

#   - platform: template
#     name: Send 1st packet to ${name}
#     id: send_packet_switch
#     entity_category: DIAGNOSTIC
#     #setup_priority : -100.0 ## late
#     optimistic: true
#     turn_on_action:
#       - lambda: |-          
#           id(esp32_clim).sendFirstConnectionPacket();    
  
#   - platform: template
#     name: Requests ${name} Synchro
#     id: build_and_send_requests_info_packets
#     entity_category: DIAGNOSTIC
#     #setup_priority : -100.0 ## late
#     optimistic: true    
#     turn_on_action:
#       - lambda: |-          
#           id(esp32_clim).buildAndSendRequestsInfoPackets(); 