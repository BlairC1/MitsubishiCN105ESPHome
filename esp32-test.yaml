substitutions:
  name: "hpsejour"
  friendly_name: Climatisation Séjour

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf     
    #type: arduino


  
    

# mqtt:  
#   broker: 10.1.101.172
#   username: heatpumpSejour
#   password: !secret mqtt_password
#   discovery: true
  

# Enable logging
logger:  
  hardware_uart: UART0
  level: VERBOSE
  # logs:
  #   CN105Climate: WARN
  #   CN105: WARN
  #   climate: WARN
  #   sensor: WARN
  #   chkSum : INFO
  #   WRITE : WARN
  #   READ : WARN
  #   Header: INFO
  #   Decoder : WARN
    

# Enable Home Assistant API
api:
  services:    
    - service: set_remote_temperature
      variables:
        temperature: float
      then:
        - lambda: 'id(clim_sejour).set_remote_temperature(temperature);'

    - service: use_internal_temperature
      then:
        - lambda: 'id(clim_sejour).set_remote_temperature(0);'
  encryption:
    key: !secret encryption_key

ota:  
  password: !secret ota_pwd

wifi:
  #ssid: !secret wifi_ssid
  #password: !secret wifi_password
  
  networks:
  - ssid : !secret wifi_ssid3
    password: !secret wifi_password3
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  #- ssid: !secret wifi_ssid2
  #  password: !secret wifi_password2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heatpump-Sejour Fallback Hotspot"
    password: !secret ota_pwd

captive_portal:

# pas assez de place pour update ota 
#web_server:
#  port: 80
  
time:
  - platform: homeassistant
    id: homeassistant_time

# this setting is for local component (code is not on github)
external_components:
 - source:
     type: local
     path: components 


#this setting is for github component 
# external_components:
#  - source: github://echavet/MitsubishiCN105ESPHome
#    refresh: 0s


        # Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ${name} ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${name} IP
    ssid:
      name: ${name} SSID
    bssid:
      name: ${name} BSSID

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${name} WiFi Signal
    update_interval: 60s
  
  # Etat de l'attribut operating décodé dans les trames de réponse du clim
  # - platform: template
  #   name: Operating (Clim)
  #   update_interval: 10s
  #   lambda: |-
  #     return(id(clim_sejour).is_operating());
  
  # Etat de l'attribut compressor°frequency décodé dans les trames de réponse du clim
  # généré dynamiquement dans le code de la clim
  # - platform: template
  #   name: Compressor Frequency (Clim)
  #   update_interval: 10s
  #   lambda: |-
  #     return(id(clim_sejour).get_compressor_frequency());

uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: 0
  rx_pin: 3
  
# Configuration pour l'objet 'climate'
climate:
  - platform: cn105  # remplis avec la plateforme de ton choix
    name: ${friendly_name}
    id: "clim_sejour"
    # baud_rate: 2400
    # hardware_uart: UART1
    update_interval: 10s         # shouldn't be less than 4 seconds
    # Ajoute d'autres paramètres spécifiques à ton matériel et tes besoins


# Configuration pour l'objet 'switch' (bouton)
# switch:
#   - platform: template
#     name: ${name} UART Setup Switch
#     id: uart_setup_switch
#     entity_category: DIAGNOSTIC
#     #setup_priority : -100.0 ## late
#     optimistic: true
#     turn_on_action:
#       - lambda: |-
#           // Appelle la méthode 'setupUART' quand le switch est activé
#           id(clim_sejour).setupUART();
#     turn_off_action:
#       - lambda: |-
#           // Appelle la méthode 'setupUART' quand le switch est activé
#           id(clim_sejour).disconnectUART();

#   - platform: template
#     name: Send 1st packet to ${name}
#     id: send_packet_switch
#     entity_category: DIAGNOSTIC
#     #setup_priority : -100.0 ## late
#     optimistic: true
#     turn_on_action:
#       - lambda: |-          
#           id(clim_sejour).sendFirstConnectionPacket();    
  
#   - platform: template
#     name: Requests ${name} Synchro
#     id: build_and_send_requests_info_packets
#     entity_category: DIAGNOSTIC
#     #setup_priority : -100.0 ## late
#     optimistic: true    
#     turn_on_action:
#       - lambda: |-          
#           id(clim_sejour).buildAndSendRequestsInfoPackets(); 